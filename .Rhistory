library(caret)
install.packages(c("manipulate", "nlme", "survival"))
install.packages("caret")
install.packages("manipulate")
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
install.packages(c("nnet", "MASS", "dplyr", "tidyr"))
install.packages(c("dplyr", "mgcv", "Rcpp", "survival", "tibble"))
install.packages("mgcv")
setwd("~/Github/kaggle_titanic_survival")
nearZeroVar(data)
library("caret", lib.loc="~/R/R-3.3.0/library")
data <- read.csv(file="data.csv",head=TRUE,sep=",")
library("caret", lib.loc="~/R/R-3.3.0/library")
nearZeroVar(data)
nzv = nearZeroVar(data)
nzv
nzv = nearZeroVar(data,saveMetrics= TRUE)
nzv
highCorr = findCorrelation(data, cutoff = .85)
highCorr = findCorrelation(cor(data), cutoff = .85)
cor(data)
highCorr = findCorrelation(cor(data[,sapply(data, is.numeric)]), cutoff = .85)
cor(data[,sapply(data, is.numeric)])
highCorr = findCorrelation(cor(data[,sapply(data, is.numeric)]), cutoff = .65)
data[,highCorr]
data[,sapply(data, is.numeric)][,highCorr]
View(data)
#data[,sapply(data, is.numeric)][,highCorr]
data <- read.csv(file="data.csv",head=TRUE,sep=",")
nzv = nearZeroVar(data,saveMetrics= TRUE)
highCorr = findCorrelation(cor(data[,sapply(data, is.numeric)]), cutoff = .85)
#data[,sapply(data, is.numeric)][,highCorr]
preProc = preProcess(data,method='BoxCox')
trainBC = predict(preProc,data)
install.packages("e1071")
library("e1071", lib.loc="~/R/R-3.3.0/library")
preProc = preProcess(data,method='BoxCox')
trainBC = predict(preProc,data)
View(trainBC)
preProc = preProcess(data,method=c("center", "scale"))
trainBC = predict(preProc,data)
View(trainBC)
preProc = preProcess(data,method=c("center", "scale", "YeoJohnson", "nzv"))
trainBC = predict(preProc,data)
View(trainBC)
install.packages("doMPI")
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 2)
gbmFit1 <- train(Survived ~ ., data = data, method = "gbm", trControl = fitControl)
gbmFit1
gbmFit1 <- train(Survived ~ ., data = data, method = "gbm", trControl = fitControl, metric = 'ROC', verbose = F)
gbmFit1
gbmFit1 <- train(Survived ~ ., data = data, method = "gbm", trControl = fitControl, metric = 'ROC', verbose = F)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 2, classProbs = TRUE)
gbmFit1 <- train(Survived ~ ., data = data, method = "gbm", trControl = fitControl, metric = 'ROC', verbose = F)
fitControl <- trainControl(method = "repeatedcv", number = 5, repeats = 2, classProbs = TRUE)
gbmFit1 <- train(Survived ~ ., data = data, method = "gbm", trControl = fitControl, metric = 'ROC', verbose = F)
data[data$Survived==1]$surv = 'Y'
data[data$Survived==0]$surv = 'N'
data[,data$Survived==1]$surv = 'Y'
data[,data$Survived==0]$surv = 'N'
data[which(data$Survived==1)]$surv = 'Y'
data[which(data$Survived==0)]$surv = 'N'
data$surv <- ifelse(data$Survived ==1, "Y", "N")
data[,~Survived]
data[,-Survived]
data = subset(data,select= -Survived)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 2,
classProbs = TRUE)
gbmFit <- train(surv ~ ., data = data,
method = "gbm",
trControl = fitControl,
metric = 'ROC',
preProcess = c("center", "scale"),
verbose = F)
gbmFit
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
install.packages("rpart")
library("caret", lib.loc="~/R/R-3.3.0/library")
library("e1071", lib.loc="~/R/R-3.3.0/library")
library("rpart", lib.loc="~/R/R-3.3.0/library")
fit <- rpart(surv ~.,
method="class",
data=data)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
# plot tree
plot(fit, uniform=TRUE,
main="Who survived?")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
data = subset(data,select= -c(Survived,Age))
data = subset(data,select= -c('Survived','Age'))
data = subset(data,select= -Survived Age))
data = subset(data,select= -Survived))
data = subset(data,select= -Survived)
data = subset(data,select= -Age)
fit <- rpart(surv ~.,
method="class",
data=data)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
plot(fit, uniform=TRUE,
main="Who survived?")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit,
main="Who survived?")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
fit <- rpart(surv ~ -Ticket,
method="class",
data=data)
data <- read.csv(file="data.csv",head=TRUE,sep=",")
data$surv <- ifelse(data$Survived ==1, "Y", "N")
data = subset(data,select= -c(Survived,Age,Ticket,))
data = subset(data,select= -c(Survived,Age,Ticket))
fit <- rpart(surv ~ .,
method="class",
data=data)
plot(fit, uniform=TRUE,
main="Who survived?")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
summary(fit) # detailed summary of splits
install.packages("rpart.plot")
library("rpart", lib.loc="~/R/R-3.3.0/library")
library("rpart.plot", lib.loc="~/R/R-3.3.0/library")
prp(fit)
fancyRpartPlot(fit)
install.packages("rattle")
library("rpart", lib.loc="~/R/R-3.3.0/library")
fancyRpartPlot(fit)
library("rpart.plot", lib.loc="~/R/R-3.3.0/library")
library("rattle", lib.loc="~/R/R-3.3.0/library")
library("RGtk2", lib.loc="~/R/R-3.3.0/library")
fancyRpartPlot(fit)
data <- read.csv(file="data.csv",head=TRUE,sep=",")
data$surv <- ifelse(data$Survived ==1, "Y", "N")
data = subset(data,select= -c(Survived,Age,Ticket,Lname))
fit <- rpart(surv ~ .,
method="class",
data=data)
fancyRpartPlot(fit)
prp(fit)
plot(fit, uniform=TRUE,
main="Who survived?")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
gbmFit <- train(surv ~ ., data = data,
method = "gbm",
trControl = fitControl,
metric = 'ROC',
preProcess = c("center", "scale"),
verbose = F)
gbmFit
pkgs <- c(
"broom", "dplyr", "ggplot2", "jsonlite", "Lahman", "purrr",
"rcorpora", "readr", "rmarkdown", "stringr", "tibble", "tidyr"
)
install.packages(pkgs)
install.packages(pkgs)
ggplot(data = mpg)
ggplot(data = mpg)
install.packages("tibble")
install.packages("readr")
install.packages("webreadr")
install.packages("tidyr")
install.packages("stringr")
install.packages("installr")
library("installr", lib.loc="~/R/R-3.3.0/library")
updateR()
